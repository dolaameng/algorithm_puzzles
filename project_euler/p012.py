"""
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

## Back-envelope: 500 * sqrt(500) = 10**4 not a big deal
from simple_profile import timed_call

# for n = 15, return {3: 1, 5: 1}
def prime_factors(n):
    factor_powers = {}
    i = 2
    while i <= n:
        while n % i == 0:
            factor_powers[i] = factor_powers.get(i, 0) + 1
            n /= i
        i += 1
    return factor_powers
    
def num_factors(n):
    prime_powers = prime_factors(n)
    return (reduce(lambda x, y: x*(y+1), prime_powers.values(), 1)
            if prime_powers
            else 1)

def solution1():
    N = 500
    def triangles():
        t, i = 1, 1
        while True:
            yield t
            i += 1
            t += i
    
    return next(t for t in triangles() if num_factors(t) > N)

## tests
if __name__ == '__main__':
    ## test prime_factors
    assert [(n, prime_factors(n)) for n in range(1, 21)] == [
        (1, {}), (2, {2: 1}), (3, {3: 1}), (4, {2: 2}), 
        (5, {5: 1}), (6, {2: 1, 3: 1}), (7, {7: 1}), 
        (8, {2: 3}), (9, {3: 2}), (10, {2: 1, 5: 1}), 
        (11, {11: 1}), (12, {2: 2, 3: 1}), (13, {13: 1}), 
        (14, {2: 1, 7: 1}), (15, {3: 1, 5: 1}), (16, {2: 4}), 
        (17, {17: 1}), (18, {2: 1, 3: 2}), (19, {19: 1}), (20, {2: 2, 5: 1})]
    ## test num_factors
    assert [(n, num_factors(n)) for n in (1, 3, 6, 10, 15, 21, 28)] == [(1, 1), (3, 2), (6, 4), (10, 4), (15, 4), (21, 4), (28, 6)]
    ## test solution1
    t, r = timed_call(solution1)
    assert r == 76576500
    assert t < 7
    print 'all tests pass'